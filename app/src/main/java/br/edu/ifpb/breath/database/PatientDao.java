package br.edu.ifpb.breath.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import br.edu.ifpb.breath.database.Patient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT".
*/
public class PatientDao extends AbstractDao<Patient, Long> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, Integer.class, "age", false, "AGE");
        public final static Property RegistrationCode = new Property(3, String.class, "registrationCode", false, "REGISTRATION_CODE");
        public final static Property Procedures = new Property(4, String.class, "procedures", false, "PROCEDURES");
        public final static Property Surgeries = new Property(5, String.class, "surgeries", false, "SURGERIES");
        public final static Property RequiredPrecautions = new Property(6, Boolean.class, "requiredPrecautions", false, "REQUIRED_PRECAUTIONS");
        public final static Property AdditionalInfo = new Property(7, String.class, "additionalInfo", false, "ADDITIONAL_INFO");
    };


    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" INTEGER," + // 2: age
                "\"REGISTRATION_CODE\" TEXT," + // 3: registrationCode
                "\"PROCEDURES\" TEXT," + // 4: procedures
                "\"SURGERIES\" TEXT," + // 5: surgeries
                "\"REQUIRED_PRECAUTIONS\" INTEGER," + // 6: requiredPrecautions
                "\"ADDITIONAL_INFO\" TEXT);"); // 7: additionalInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        String registrationCode = entity.getRegistrationCode();
        if (registrationCode != null) {
            stmt.bindString(4, registrationCode);
        }
 
        String procedures = entity.getProcedures();
        if (procedures != null) {
            stmt.bindString(5, procedures);
        }
 
        String surgeries = entity.getSurgeries();
        if (surgeries != null) {
            stmt.bindString(6, surgeries);
        }
 
        Boolean requiredPrecautions = entity.getRequiredPrecautions();
        if (requiredPrecautions != null) {
            stmt.bindLong(7, requiredPrecautions ? 1L: 0L);
        }
 
        String additionalInfo = entity.getAdditionalInfo();
        if (additionalInfo != null) {
            stmt.bindString(8, additionalInfo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // registrationCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // procedures
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // surgeries
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // requiredPrecautions
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // additionalInfo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRegistrationCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProcedures(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSurgeries(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequiredPrecautions(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAdditionalInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Patient entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Patient entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
